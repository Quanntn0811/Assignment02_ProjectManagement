using Microsoft.EntityFrameworkCore;
using ProjectManagement_BusinessObjects.Database;
using ProjectManagement_BusinessObjects.Entities;
using ProjectManagement_BusinessObjects.Enums;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectManagement_DAO
{
    public class ProjectDAO
    {
        private readonly ProjectManagementContext _context = null;
        private static ProjectDAO _instance = null;

        public static ProjectDAO Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new ProjectDAO();
                }

                return _instance;
            }
        }

        public ProjectDAO()
        {
            _context = new ProjectManagementContext();
        }

        public IEnumerable<Project> GetProjects()
        {
            return _context.Projects.ToList();
        }

        public Project GetProject(int id)
        {
            var project = _context.Projects.Include(p => p.Group).Include(p => p.ProjectEmployees).ThenInclude(pe => pe.Employee).FirstOrDefault(p => p.Id == id);

            if (project == null)
            {
                throw new Exception($"The project with ID {id} does not exists");
            }

            return project;
        }

        public void AddNew(CreateNewProjectRequest createNewProjectRequest)
        {
            var group = _context.Groups.FirstOrDefault(g => g.Id == createNewProjectRequest.GroupId);

            if (group == null)
                throw new Exception($"The group witd ID {createNewProjectRequest.GroupId} does not exist.");


            var number = _context.Projects.FirstOrDefault(p => p.Number == createNewProjectRequest.Number);

            if (number != null)
                throw new Exception("Number Already Exist");

            Project pro = new()
            {
                Number = createNewProjectRequest.Number,
                Name = createNewProjectRequest.Name,
                Customer = createNewProjectRequest.Customer,
                StartDate = createNewProjectRequest.StartDate,
                EndDate = createNewProjectRequest?.EndDate,
                GroupId = createNewProjectRequest.GroupId,
                Version = 1,
            };

            ProjectStatus status;

            if (!Enum.TryParse(createNewProjectRequest.Status, out status))
                throw new Exception("Invalid status");

            pro.Status = status.ToString();

            pro.ProjectEmployees = new List<ProjectEmployee>();

            foreach (var employee in createNewProjectRequest.Employees)
            {
                var emp = _context.Employees.FirstOrDefault(e => e.Visa == employee);

                if (emp == null)
                    throw new Exception("Employee Not Found");


                pro.ProjectEmployees.Add(new ProjectEmployee
                {
                    EmployeeId = emp.Id,
                    // Because projectId is IDENTITY (Id will be generated by database server), so we dont have it here.
                    // However, we can pass the project object and the EF will know to add the projectId for ProjectEmployees table
                    Project = pro
                }
                );
            }

            _context.Projects.Add(pro);
            _context.SaveChanges();
        }
        public void Update(int id, UpdateProjectRequest updateProjectRequest)
        {
            var pro = _context.Projects.FirstOrDefault(x => x.Id == id);

            if (pro == null)
                throw new Exception($"The project witd ID {id} does not exist.");

            var group = _context.Groups.FirstOrDefault( g => g.Id == updateProjectRequest.GroupId);

            if (group == null)
                throw new Exception($"The group with ID {updateProjectRequest.GroupId} does not exist.");

            pro.GroupId = updateProjectRequest.GroupId;
            pro.Name = updateProjectRequest.Name;
            pro.Customer = updateProjectRequest.Customer;
            pro.Status = updateProjectRequest.Status;
            pro.StartDate = updateProjectRequest.StartDate;
            pro.EndDate = updateProjectRequest.EndDate;

            // Remove old employees in project
            var listEmployeeProjectFromDb = _context.ProjectEmployees.Where(pe => pe.ProjectId == id);

            if (listEmployeeProjectFromDb.Any()) _context.ProjectEmployees.RemoveRange(listEmployeeProjectFromDb);

            // Add new employees in project 
            foreach (var employee in updateProjectRequest.Employees)
            {
                var emp = _context.Employees.FirstOrDefault(e => e.Visa == employee);

                if (emp == null)
                    throw new Exception("Employee Not Found");

                _context.ProjectEmployees.Add(new ProjectEmployee
                {
                    EmployeeId = emp.Id,
                    ProjectId = pro.Id,
                });
            }

            _context.Update(pro);

            try
            {
                _context.SaveChanges();
            }
            catch (DbUpdateConcurrencyException ex)
            {
                var entity = ex.Entries.Single();
                var databaseValues = entity.GetDatabaseValues();

                entity.OriginalValues.SetValues(databaseValues);
                throw new Exception("The record you attempt to update was modified by another user after you got the orginal values");
            }

        }
        public void Delete(int id)
        {
            var pro = _context.Projects.Include(p => p.Group).FirstOrDefault(x => x.Id == id);

            if (pro == null)
                throw new Exception($"The project witd ID {id} does not exist.");

            var listEmployeeProjectFromDb = _context.ProjectEmployees.Where(pe => pe.ProjectId == pro.Id);


            _context.ProjectEmployees.RemoveRange(listEmployeeProjectFromDb);

            _context.Projects.Remove(pro);

            try
            {
                _context.SaveChanges();
            }
            catch (DbUpdateConcurrencyException ex)
            {
                throw new Exception("Don't know how to handle concurrency conflicts");
            }
        }

        public IEnumerable<ProjectStatus> GetProjectStatus()
        {
            return Enum.GetValues(typeof(ProjectStatus)).Cast<ProjectStatus>().ToList();
        }
    
        public IEnumerable<Project> GetSearchProjects(string name, string customer, string number, string status)
        {
            var list = _context.Projects.AsEnumerable();
            if (name != null)
            {
                list = _context.Projects.Where(p => p.Name.Contains(name));
            }             
            else if (customer != null)
            {
                list = _context.Projects.Where(p => p.Customer.Contains(customer));
            }
            else if (number != null)
            {
                int num = Convert.ToInt32(number);
                list = _context.Projects.Where(p => p.Number == num);
            }
            else if (status != null)
            {
                list = _context.Projects.Where(p => p.Status == status);
            }

            return list.ToList();
        }
    }
}
